# ‚Äú–û—Å–Ω–æ–≤–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö‚Äù
# –û–ø–∏—Å –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è

# –ó–∞–≤–¥–∞–Ω–Ω—è 2
# –ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑—Ä–æ–±–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Ä—è–¥–æ–∫ —è–∫ –≤—Ö—ñ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –¥–æ–¥–∞—î –≤—Å—ñ –π–æ–≥–æ —Å–∏–º–≤–æ–ª–∏ –¥–æ –¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—å–æ—ó 
# —á–µ—Ä–≥–∏ (deque –∑ –º–æ–¥—É–ª—è collections –≤ Python), –∞ –ø–æ—Ç—ñ–º –ø–æ—Ä—ñ–≤–Ω—é—î —Å–∏–º–≤–æ–ª–∏ –∑ –æ–±–æ—Ö –∫—ñ–Ω—Ü—ñ–≤ —á–µ—Ä–≥–∏, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏, 
# —á–∏ —î —Ä—è–¥–æ–∫ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º. –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ —è–∫ —Ä—è–¥–∫–∏ –∑ –ø–∞—Ä–Ω–æ—é, —Ç–∞–∫ —ñ –∑ –Ω–µ–ø–∞—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é 
# —Å–∏–º–≤–æ–ª—ñ–≤, –∞ —Ç–∞–∫–æ–∂ –±—É—Ç–∏ –Ω–µ—á—É—Ç–ª–∏–≤–æ—é –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤.

# –ó–∞–≤–¥–∞–Ω–Ω—è 3 (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è)
# –£ –±–∞–≥–∞—Ç—å–æ—Ö –º–æ–≤–∞—Ö –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–∏ –º–∞—î–º–æ —Å–ø—Ä–∞–≤—É –∑ –≤–∏—Ä–∞–∑–∞–º–∏, –≤–∏–¥—ñ–ª–µ–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞–º–∏, —Ç–∞–∫–∏–º–∏ —è–∫ 
# –∫—Ä—É–≥–ª—ñ ( ), –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ [ ] –∞–±–æ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏ { }.

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —á–∏—Ç–∞—î —Ä—è–¥–æ–∫ –∑ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—é —Å–∏–º–≤–æ–ª—ñ–≤-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ–≤, 
# –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ( ) { [ ] ( ) ( ) { } } }, —ñ –Ω–∞–¥–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ —Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ, 
# –Ω–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ( ( ( ) , –∞–±–æ –∫–æ–ª–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ —Ä—ñ–∑–Ω–∏—Ö –≤–∏–¥—ñ–≤ —Å—Ç–æ—è—Ç—å —É –ø–∞—Ä—ñ, —è–∫-–æ—Ç ( }.

#  üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–µ–∫, —â–æ–± –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–∏–º–≤–æ–ª–∏-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ.

# –ü—Ä–∏–∫–ª–∞–¥ –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:

# ( ){[ 1 ]( 1 + 3 )( ){ }}: –°–∏–º–µ—Ç—Ä–∏—á–Ω–æ
# ( 23 ( 2 - 3);: –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ
# ( 11 }: –ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ



from task1 import Bank
from task2 import is_polyndrome
from task3 import is_symmetric
   

def main() :
    # –ó–∞–≤–¥–∞–Ω–Ω—è 1
    # –ø—Ä–æ–≥—Ä–∞–ºa, —è–∫–∞ —ñ–º—ñ—Ç—É—î –ø—Ä–∏–π–º–∞–Ω–Ω—è –π –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–æ–∫: –ø—Ä–æ–≥—Ä–∞–º–∞ –º–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ 
    # –∑–∞—è–≤–∫–∏ (—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º –∞–±–æ —ñ–Ω—à–∏–º–∏ –¥–∞–Ω–∏–º–∏), –¥–æ–¥–∞–≤–∞—Ç–∏ —ó—Ö –¥–æ —á–µ—Ä–≥–∏, –∞ –ø–æ—Ç—ñ–º –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ 
    # –≤–∏–¥–∞–ª—è—Ç–∏ –∑ —á–µ—Ä–≥–∏ –¥–ª—è "–æ–±—Ä–æ–±–∫–∏", —ñ–º—ñ—Ç—É—é—á–∏ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º —Ä–æ–±–æ—Ç—É —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É.
        
    # –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏:
    #     –ü–æ–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–π–¥–µ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏:
    #         –í–∏–∫–æ–Ω–∞—Ç–∏ generate_request() –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫
    #         –í–∏–∫–æ–Ω–∞—Ç–∏ process_request() –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–æ–∫
    print("Task 1 started")

    bank = Bank()

    for i in range(5):
        bank.generate_request("request" + str(i))

    bank.process_request()

    # –ó–∞–≤–¥–∞–Ω–Ω—è 2
    # –ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑—Ä–æ–±–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Ä—è–¥–æ–∫ —è–∫ –≤—Ö—ñ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –¥–æ–¥–∞—î –≤—Å—ñ –π–æ–≥–æ —Å–∏–º–≤–æ–ª–∏ –¥–æ –¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—å–æ—ó 
    # —á–µ—Ä–≥–∏ (deque –∑ –º–æ–¥—É–ª—è collections –≤ Python), –∞ –ø–æ—Ç—ñ–º –ø–æ—Ä—ñ–≤–Ω—é—î —Å–∏–º–≤–æ–ª–∏ –∑ –æ–±–æ—Ö –∫—ñ–Ω—Ü—ñ–≤ —á–µ—Ä–≥–∏, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏, 
    # —á–∏ —î —Ä—è–¥–æ–∫ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º. –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ —è–∫ —Ä—è–¥–∫–∏ –∑ –ø–∞—Ä–Ω–æ—é, —Ç–∞–∫ —ñ –∑ –Ω–µ–ø–∞—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é 
    # —Å–∏–º–≤–æ–ª—ñ–≤, –∞ —Ç–∞–∫–æ–∂ –±—É—Ç–∏ –Ω–µ—á—É—Ç–ª–∏–≤–æ—é –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤.

    print("Task 2 started")

    while True:
        if (is_polyndrome(input("Enter any string. I'll check wether it is palindrome or not:"))):
            print("Yes, it is palindrome")
        else:
            print("No, it is not palindrome")

        if "N" == (input("Would you like to try again? (Y/N)")).upper():
            break

    # –ó–∞–≤–¥–∞–Ω–Ω—è 3 (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è)
    # –£ –±–∞–≥–∞—Ç—å–æ—Ö –º–æ–≤–∞—Ö –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–∏ –º–∞—î–º–æ —Å–ø—Ä–∞–≤—É –∑ –≤–∏—Ä–∞–∑–∞–º–∏, –≤–∏–¥—ñ–ª–µ–Ω–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞–º–∏, —Ç–∞–∫–∏–º–∏ —è–∫ 
    # –∫—Ä—É–≥–ª—ñ ( ), –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ [ ] –∞–±–æ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏ { }.
    # –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —á–∏—Ç–∞—î —Ä—è–¥–æ–∫ –∑ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—é —Å–∏–º–≤–æ–ª—ñ–≤-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ–≤, 
    # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ( ) { [ ] ( ) ( ) { } } }, —ñ –Ω–∞–¥–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ —Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ, 
    # –Ω–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ( ( ( ) , –∞–±–æ –∫–æ–ª–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ —Ä—ñ–∑–Ω–∏—Ö –≤–∏–¥—ñ–≤ —Å—Ç–æ—è—Ç—å —É –ø–∞—Ä—ñ, —è–∫-–æ—Ç ( }.
    print("Task 3 started")

    while True:
            expression = input("Enter an expression: ")
            print(f"{expression}: {is_symmetric(expression)}")
            if "N" == (input("Would you like to try again? (Y/N)")).upper():
                break


if __name__=='__main__':

    main()